# Python中3种方式定义类方法, 常规方式, @classmethod修饰方式, @staticmethod修饰方式.
# https://www.cnblogs.com/elie/p/5876210.html
# 普通的类方法foo()需要通过self参数隐式的传递当前类对象的实例。
# @classmethod修饰的方法class_foo()需要通过cls参数传递当前类对象。
# @staticmethod修饰的方法定义与普通函数是一样的。
# @classmethod 与staticmethod 方法均可通过类对象或对象实例调用，常规方法可通过实例调用，类对像直接调用则会出现参数错误。继承与覆盖普通类函数是一样的。
# @staticmethod是把函数嵌入到类中的一种方式，函数就属于类，同时表明函数不需要访问这个类。通过子类的继承覆盖，能更好的组织代码。
# @staticmethod 不需要访问和类相关的属性或数据，@classmethod 可以访问和类相关（不和实例相关)的属性。

# 如果你定义了一个方法它的返回值永远和类的属性及实例无关，结果永远不变，就用@staticmethod
# 如果你定义了一个方法它的返回值和只和类的属性有关，结果可变.就用@classmethod 

# self和cls的区别不是强制的，只是PEP8中一种编程风格，slef通常用作实例方法的第一参数，cls通常用作类方法的第一参数。即通常用self来传递当前类对象的实例，cls传递当前类对象。

import sys


class A(object):
    def foo(self, x):
        print("executing foo(%s, %s)" % (self, x))

    @classmethod
    def class_foo(cls, x):
        print("execting class_foo(%s,%s)" % (cls, x))
        print('cls:', cls)

    @staticmethod
    def static_foo(x):
        print("executing static_foo(%s)" % x)


class B(A):
    pass


if __name__ == "__main__":
    a = A()
    print(a.foo)
    print(a.foo(1))
    # print(A.foo(1))
    print(A.foo(a,1))
    print(a.class_foo)
    print(a.static_foo)
    print("============")
    b = B()
    print(b.foo(1))
    b.class_foo(1)
